define("scrat-site/0.1.0/pages/command/command.js",function(e,s){"use strict";s.getMarkdown=function(){return'<blockquote> <p>scrat是基于 <a href=http://fis.baidu.com>fis</a> 打造的集成解决方案，其命令行风格也基本保持一致。</p> </blockquote> <h2 id=user-content-scrat%20release>scrat release</h2> <blockquote> <p>项目构建命令，满足所有开发、构建、部署需求。</p> </blockquote> <p>在项目目录下执行 <code>scrat release</code> 命令，即可对项目进行构建，并将构建结果发布到本地服务器调试目录</p> <p><img src=/public/c/scrat-site/0.1.0/pages/quick-start/release_005efb6.gif alt=项目构建效果截图></p> <p>构建工具常见的功能就是区分构建目的，比如开发构建、测试构建、上线构建等。scrat并不像 <a href=http://gruntjs.com>grunt</a> 或者 <a href=http://gulpjs.com>gulp</a> 那样定义不同的task来区分构建目的，而是通过release命令的多种参数组合来确定构建目的。</p> <p>scrat release 命令的所有参数可以通过 scrat release -h 命令来查看，其中常用的包括：</p> <ul> <li><code>--dest &lt;paths&gt;</code>：指定构建结果的发布路径。</li> <li><code>--md5</code>：是否给非模块化静态资源添加md5戳。</li> <li><code>--domains</code>：是否为静态资源添加域名。</li> <li><code>--lint</code>：是否开启代码校验。</li> <li><code>--optimize</code>：是否开启代码压缩</li> <li><code>--pack</code>：是否开启csssprite、combo合并。</li> <li><code>--watch</code>：是开启文件监听</li> <li><code>--live</code>：是否开启浏览器自动刷新</li> <li><code>--unique</code>：是否使用独立缓存(ci上构建时使用)</li> </ul> <p>scrat release 命令的所有参加均可 <code>自由组合</code>，不同参数的不同组合即可得到不同的开发状态，参数顺序没有影响。</p> <h2 id=user-content-%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F>工作方式</h2> <p><img src=/public/c/scrat-site/0.1.0/pages/command/release_9f56b9a.png alt="scrat release工作原理"></p> <p>scrat <code>绝对不会</code> 修改用户的源代码，而是将源码处理后发布到另外一个目录下，这样可以对产出目录中的文件进行浏览或发布。因此scrat release其实始终需要 <code>--dest &lt;发布目录&gt;</code>参数来制定发布目的地的。开发时为了方便起见，运行省略--dest参数，如果省略，代码会被发布到内置的调试服务器目录下，方便预览。</p> <blockquote> <p>有些简易的构建工具会对源码直接进行浏览，其原理是服务器浏览的同时实时构建代码，这种方式<code>很矬</code>，相当于写了两套构建过程，非常不可取。</p> </blockquote> <h3 id=user-content-%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91>本地开发</h3> <blockquote> <p>无压缩优化 + 文件监听 + 自动刷新</p> </blockquote> <p>本地开发常用的参数组合就是 <code>--watch</code> 和 <code>--live</code> 了，也就是文件监听+浏览器自动刷新：</p> <pre><code class="hljs bash">scrat release --watch --live\n</code></pre> <p>添加--watch参数之后，命令行会hold住，保持命令窗口不要关闭，执行修改源码、保持，就能看到浏览器自动刷新。</p> <p>--watch 和 --live 参数都有各自的缩短写法 <code>-w</code> 和 <code>-L</code>(注意大小写)。因此上面的命令可以简写为：</p> <pre><code class="hljs bash">scrat release -w -L\n</code></pre> <p>另外，命令行参数还能进一步 <code>连写</code> ，因此上述命令还能进一步简化为：</p> <pre><code class="hljs bash">scrat release -wL\n</code></pre> <p>由于命令省略了 <code>--dest &lt;paths&gt;</code> 参数，因此scrat会把构建结果发送到默认的服务器目录，使用 <code>scrat server open</code> 命令可以查看该目录。</p> <h3 id=user-content-%E4%B8%8A%E7%BA%BF%E9%83%A8%E7%BD%B2>上线部署</h3> <blockquote> <p>加域名 + 压缩 + 校验 + 加md5戳 + 请求合并&amp;CSS雪碧图 + 发布到指定目录。</p> </blockquote> <p>要上线部署时，就不在需要文件监听(--watch)和自动刷新(--live)了，此时使用 <code>--dest &lt;paths&gt;</code> 参数把处理后的代码发布到指定目录，然后将发布目录下的代码部署到线上即可，在项目目录下执行：</p> <pre><code class="hljs bash">scrat release --domains --optimzie --lint --md5 --packe --dest ../output\n</code></pre> <p>同样的，可以使用简写和连写的方式：</p> <pre><code class="hljs bash">scrat release -Dolmpd ../output\n</code></pre> <p>将代码发布到指定目录后就可以做进一步的部署安排了，scrat <a href="https://github.com/scrat-team/scrat-site/">官网项目</a> 就是用scrat进行 <a href=https://travis-ci.org/scrat-team/scrat-site>持续集成构建</a> 的，代码构建好之后又做了一系列的 <a href=https://github.com/scrat-team/scrat-site/blob/master/.build.sh>部署操作</a>，最终将构建结果推送到github.io上。</p> <h2 id=user-content-scrat%20install>scrat install</h2> <blockquote> <p>从GitHub安装生态组件，提升开发效率。</p> </blockquote> <p>scrat采用 <a href=https://github.com/component>component</a> 作为模块生态，有关模块生态的更多信息请阅读 <a href=/#!/components>这里</a>。</p> <p>在项目目录下准备一个 <code>component.json</code> 文件，用于记录生态模块安装信息。如果component.json中已声明了依赖，直接执行：</p> <pre><code class="hljs bash">scrat install\n</code></pre> <p>即可将依赖的生态模块直接从Github下载下来并安装到工程中：</p> <p><img src=/public/c/scrat-site/0.1.0/pages/quick-start/install_28fbc0d.gif alt=安装生态截图></p> <p>当项目未获到一定阶段后，需要安装新的模块，直接运行：</p> <pre><code class="hljs bash">scrat install &lt;用户名&gt;/&lt;仓库名&gt;\n</code></pre> <p>其中的用户名为GitHub用户名，如果需要安装指定版本的模块，则执行：</p> <pre><code class="hljs bash">scrat install &lt;用户名&gt;/&lt;仓库名&gt;@版本号\n</code></pre> <p>例如想安装最新版的 <a href=https://github.com/ftlabs/fastclick>fastclick</a>，其拥有者为 <a href=https://github.com/ftlabs>ftlabs</a>，则在项目目录下执行：</p> <pre><code class="hljs bash">scrat install ftlabs/fastclick\n</code></pre> <p>如果要安装 <code>v0.6.5</code> 这个版本，则执行：</p> <pre><code class="hljs bash">scrat install ftlabs/fastclick@v0.<span class=hljs-number>6.5</span>\n</code></pre> <h2 id=user-content-scrat%20server%20%26lt%3Bcmd%26gt%3B>scrat server &lt;cmd&gt;</h2> <blockquote> <p>nodejs服务器相关命令，方便本地浏览调试项目。</p> </blockquote> <p>scrat设计之初是考虑和nodejs服务器进行结合的项目开发，因此内置的调试服务器也是来自工程的源代码支持。scrat server有三条服务器相关的命令，分别是：</p> <h3 id=user-content-scrat%20server%20open>scrat server open</h3> <blockquote> <p>打开调试服务器目录</p> </blockquote> <p><code>scrat release</code> 命令默认的发布路径极为该目录。项目开发时，执行 scrat release 命令，工具会把工程构建之后发布到这个目录下。不同的操作系统其调试服务器目录也不同，其中：</p> <ul> <li>mac：/Users/&lt;用户名&gt;/.scrat-tmp/www</li> <li>linux：/home/&lt;用户名&gt;/.scrat-tmp/www</li> <li>windows：C:\\Documents and Settings\\&lt;用户名&gt;\\Application Data\\.scrat-tmp\\www</li> </ul> <p>调试目录是一个 <code>垃圾堆</code>，把项目构建过去浏览即可。</p> <h3 id=user-content-scrat%20server%20start>scrat server start</h3> <blockquote> <p>启动调试服务器</p> </blockquote> <p>在启动调试服务器之前，先对项目进行一次构建，执行 <code>scrat release</code>，工具把构建后的代码发布到调试目录中，此时在 <code>任意位置</code> 执行：</p> <pre><code class="hljs bash">scrat server start\n</code></pre> <p>命令会去到 <code>调试目录</code> 中执行 <code>npm install &amp;&amp; node .</code> 命令。这样，如果源码工程中有 <code>package.json</code> 文件，经过scrat release命令的构建，就会发布到调试目录下，之后再在调试目录下执行 <code>npm install &amp;&amp; node .</code> 即可根据package.json的记录安装npm包并执行package.json所指定的main文件了。</p> <h3 id=user-content-scrat%20server%20clean>scrat server clean</h3> <blockquote> <p>清除调试目录下的文件</p> </blockquote> <p>有时候本地开发可能会在多个项目中切换，由于scrat构建时，默认的代码都发布到相同的调试目录下，因此切换项目前应该先进行清除调试目录文件的操作。在任意位置执行：</p> <pre><code class="hljs bash">scrat server clean\n</code></pre> <p>即可清除调试目录下的文件，得到一个干净的调试环境。</p> <h2 id=user-content-scrat%20init>scrat init</h2> <blockquote> <p>项目脚手架，快速创建新项目。</p> </blockquote> <p>执行一下，你就知道，这里就不赘述了。</p> <h2 id=user-content-%E7%94%A8%20%3Ccode%3E-h%3C%2Fcode%3E%20%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96%E5%B8%AE%E5%8A%A9>用 <code>-h</code> 参数获取帮助</h2> <p>所有命令的基本用法及参数说明均可以通过 <code>-h</code> 参数获取。比如想查看scrat有哪些内置命令，则执行：</p> <pre><code class="hljs bash">scrat -h\n</code></pre> <p>即可查看所有scrat内置的命令：</p> <pre><code class="hljs bash">Usage: scrat &lt;<span class=hljs-built_in>command</span>&gt;\n\nCommands:\n\n  release     build and deploy your project\n  install     install component modules\n  server      launch nodejs server\n  init        init scrat project\n\nOptions:\n\n  -h, --help     output usage information\n  -v, --version  output the version number\n  --no-color     <span class=hljs-built_in>disable</span> colored output\n</code></pre> <p>想查看其中某个命令的参数，比如scrat release命令的参数，也可以继续使用 <code>-h</code> 参数：</p> <pre><code class="hljs bash">scrat release -h\n</code></pre> <p>得到：</p> <pre><code class="hljs bash">Usage: release [options]\n\nOptions:\n\n  -h, --help             output usage information\n  <span class=hljs-operator>-d</span>, --dest &lt;names&gt;     release output destination\n  -m, --md5 [level]      md5 release option\n  -D, --domains          add domain name\n  <span class=hljs-operator>-l</span>, --lint             with lint\n  -t, --test             with unit testing\n  -o, --optimize         with optimizing\n  -p, --pack             with package\n  -w, --watch            monitor the changes of project\n  -L, --live             automatically reload your browser\n  -c, --clean            clean compile cache\n  -r, --root &lt;path&gt;      <span class=hljs-built_in>set</span> project root\n  <span class=hljs-operator>-f</span>, --file &lt;filename&gt;  <span class=hljs-built_in>set</span> fis-conf file\n  -u, --unique           use unique compile caching\n  --verbose              <span class=hljs-built_in>enable</span> verbose output\n</code></pre>'}});