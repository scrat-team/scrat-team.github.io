define("scrat-site/0.1.0/pages/quick-start/quick-start.js",function(s,a){"use strict";a.getMarkdown=function(){return'<h2 id=user-content-1.%20%E5%AE%89%E8%A3%85%E5%B7%A5%E5%85%B7>1. 安装工具</h2> <pre><code class="hljs bash">npm install -g scrat\n</code></pre> <p>安装完成后执行 <code>scrat -v</code> 查看工具版本：</p> <p><img src=/public/c/scrat-site/0.1.0/pages/quick-start/version_2e9c407.gif alt="scrat -v"></p> <p>*nix系统下使用 <code>-g</code> 参数全局安装scrat可能会遇到权限问题，解决办法请看 <a href=https://github.com/scrat-team/scrat/issues/1>这里</a></p> <h2 id=user-content-2.%20%E4%B8%8B%E8%BD%BD%E7%A4%BA%E4%BE%8B>2. 下载示例</h2> <p>使用 <a href="http://www.git-scm.com/">git</a> clone <a href="https://github.com/scrat-team/scrat-site/">官网项目</a>（或直接 <a href=https://github.com/scrat-team/scrat-site/archive/master.zip>下载</a> 解压）</p> <pre><code class="hljs bash">git <span class=hljs-built_in>clone</span> https://github.com/scrat-team/scrat-site.git\n</code></pre> <p>进入项目目录</p> <pre><code class="hljs bash"><span class=hljs-built_in>cd</span> scrat-site\n</code></pre> <p>开发目录结构一览</p> <pre><code class="hljs bash">scrat-site\n  ├─ components     (模块化资源目录)\n  ├─ views          (非模块化资源目录)\n  ├─ server         (nodejs服务器)\n  ├─ component.json (组件依赖描述文件)\n  ├─ package.json   (nodejs包描述文件)\n  ├─ fis-conf.js    (构建工具配置文件)\n  ├─ LICENSE\n  └─ README.md\n</code></pre> <h2 id=user-content-3.%20%E5%AE%89%E8%A3%85%E5%A4%96%E9%83%A8%E7%BB%84%E4%BB%B6>3. 安装外部组件</h2> <p>在项目目录中执行命令：</p> <pre><code class="hljs bash">scrat install\n</code></pre> <p><img src=/public/c/scrat-site/0.1.0/pages/quick-start/install_28fbc0d.gif alt="scrat install安装外部组件"></p> <p>scrat install 命令会根据项目目录下的 <code>component.json</code> 文件所描述的外部依赖，从GitHub下载指定版本的模块。本项目的component.json文件内容为：</p> <pre><code class="hljs json">{\n  "<span class=hljs-attribute>name</span>": <span class=hljs-value><span class=hljs-string>"scrat-site"</span></span>,\n  "<span class=hljs-attribute>version</span>": <span class=hljs-value><span class=hljs-string>"0.1.0"</span></span>,\n  "<span class=hljs-attribute>dependencies</span>": <span class=hljs-value>{\n    "<span class=hljs-attribute>scrat-team/each</span>": <span class=hljs-value><span class=hljs-string>"0.1.0"</span></span>,\n    "<span class=hljs-attribute>scrat-team/fastclick</span>": <span class=hljs-value><span class=hljs-string>"1.0.2"</span></span>,\n    "<span class=hljs-attribute>scrat-team/router</span>": <span class=hljs-value><span class=hljs-string>"0.1.0"</span></span>,\n    "<span class=hljs-attribute>scrat-team/es5-safe</span>": <span class=hljs-value><span class=hljs-string>"0.1.0"</span></span>,\n    "<span class=hljs-attribute>scrat-team/font-awesome</span>": <span class=hljs-value><span class=hljs-string>"4.1.0"</span>\n  </span>}\n</span>}\n</code></pre> <p>scrat以 <a href="https://github.com/component/">component</a> 作为模块生态，方便获取业界已有的成熟组件，也可以让多个团队通过Github共享组件，提高项目初期的开发效率，有关scrat模块生态的更多内容请阅读 <a href=/#!/components>这里</a>。</p> <p>安装完成后，项目目录下出现一个新的文件夹 <code>component_modules</code>，按版本存放第三方组件。</p> <pre><code class="hljs bash">scrat-site\n  ├─ component_modules (第三方组件)\n  │  ├─ scrat-team-each\n  │  │  └─ <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  ├─ scrat-team-es5-safe\n  │  │  └─ <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  ├─ scrat-team-extend\n  │  │  └─ <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  ├─ scrat-team-fastclick\n  │  │  └─ <span class=hljs-number>1.0</span>.<span class=hljs-number>2</span>\n  │  ├─ scrat-team-font-awesome\n  │  │  └─ <span class=hljs-number>4.1</span>.<span class=hljs-number>0</span>\n  │  ├─ scrat-team-router\n  │  │  └─ <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  └─ scrat-team-type\n  │      └─ <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  ├─ components (当前项目组件)\n  ├─ server\n  ├─ views\n  ├─ component.json\n  ├─ package.json\n  ├─ fis-conf.js\n  ├─ LICENSE\n  └─ README.md\n</code></pre> <h2 id=user-content-4.%20%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE>4. 构建项目</h2> <p>在项目目录中执行命令：</p> <pre><code class="hljs bash">scrat release\n</code></pre> <p><img src=/public/c/scrat-site/0.1.0/pages/quick-start/release_005efb6.gif alt="scrat release"></p> <p>工具构建之后，会把构建好的代码发布到调试目录下（执行<code>scrat server open</code>命令可以查看该目录），不会污染源码目录。release命令输出的点点点代表参与构建的源码文件，每个点代表一个文件，颜色暗的点表示该文件构建速度较快（小于10ms），颜色亮的点表示该文件构建速度较慢（小于100ms）</p> <h2 id=user-content-5.%20%E6%B5%8F%E8%A7%88%E9%A1%B9%E7%9B%AE>5. 浏览项目</h2> <p>在任意位置执行命令：</p> <pre><code class="hljs bash">scrat server start\n</code></pre> <p>该命令会在调试目录下（执行<code>scrat server open</code>命令可以查看该目录）启动部署好的server目录下的服务器，启动server之前，会在调试目录下执行npm install安装package.json声明的依赖模块，因此用户不需要在源码工程中保存node_modules文件，保持源码目录的整洁干净。</p> <p>完成服务器启动后，打开浏览器访问 <a href=http://127.0.0.1:5000>http://127.0.0.1:5000</a> 即可预览项目效果。</p> <h2 id=user-content-6.%20%E6%96%87%E4%BB%B6%E7%9B%91%E5%90%AC%2B%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0>6. 文件监听+自动刷新</h2> <p>在项目目录中执行命令：</p> <pre><code class="hljs bash">scrat release -wL\n</code></pre> <p>保持scrat server start启动的命令行终端不关闭，打开新的命令行终端，执行scrat release -wL命令，即可进入文件监听+浏览器自动刷新模式。修改项目中的代码并保存，浏览器将自动刷新页面，以提高开发效率。</p> <blockquote> <p>-wL是 --watch(监听) 和 --live(刷新) 两个参数的简写组合，更多参数及使用方式请查看<a href="/#!/command?title=scrat release">这里</a></p> </blockquote> <h2 id=user-content-7.%20%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE>7. 发布项目</h2> <p>在项目目录中执行命令：</p> <pre><code class="hljs bash">scrat release -opd ../output\n</code></pre> <p>该命令会对项目进行压缩、请求合并与css雪碧图处理，并将结果发布到 <code>../output</code> 目录中，这个目录下的文件即可部署上线了</p> <blockquote> <p>release命令始终会有一个发布路径，该路径的缺省值为server的调试目录，省略-d参数scrat会将构建后的代码发布到默认的调试目录，否则会发布到-d参数制定的目录下。</p> </blockquote> <p>发布后的目录结构为：</p> <pre><code class="hljs bash">../output\n  ├─ public\n  │  ├─ c (模块化资源部署目录)\n  │  │  ├─ scrat-site\n  │  │  │  └── <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  │  ├─ scrat-team-type\n  │  │  │  └── <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  │  ├─ scrat-team-each\n  │  │  │  └── <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  │  ├─ scrat-team-es5-safe\n  │  │  │  └── <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  │  ├─ scrat-team-extend\n  │  │  │  └── <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  │  ├─ scrat-team-font-awesome\n  │  │  │  └── <span class=hljs-number>4.1</span>.<span class=hljs-number>0</span>\n  │  │  ├─ scrat-team-router\n  │  │  │  └── <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │  │  └─ scrat-team-fastclick\n  │  │     └── <span class=hljs-number>1.0</span>.<span class=hljs-number>2</span>\n  │  └─ scrat-site (非模块化资源部署目录)\n  │     └─ <span class=hljs-number>0.1</span>.<span class=hljs-number>0</span>\n  │        ├── boot.js\n  │        ├── index.html\n  │        └── lib\n  ├─ server (nodejs服务器部署目录)\n  └─ package.json (nodejs依赖描述)\n</code></pre> <p>scrat会按版本发布项目，发布后的目录路径中会出现项目版本号，采用按版本的非覆盖式发布可以实现静态资源缓存更新、灰度发布、快速回滚、保留历史版本等功能。</p> <p>当然，本地调试服务器中也能预览优化后的效果，只要将代码release到默认的调试目录下，然后刷新浏览器查看即可：</p> <pre><code class="hljs bash">scrat release -op\n</code></pre> <p>查看浏览器的network信息可以看到所有js、css、图片均被压缩，静态资源请求也以 <a href=https://github.com/alibaba/nginx-http-concat>combo</a> 形式合并，css雪碧图也完成处理了。</p> <hr> <p>至此，你已学会了scrat的基本用法，上手应该比较轻松吧:-D，如果在本章节使用上遇到什么问题，可以点击 <a href=https://github.com/scrat-team/scrat/issues>这里</a> 给我们留言。scrat会给你带来前所未有的开发体验，更多酷爽功能可以继续阅读：</p> <ul> <li><a href="/#!/command?title=scrat init">使用脚手架创建新项目</a></li> <li><a href="/#!/modular?title=规范">开发目录结构说明</a></li> <li><a href=/#!/modular>模块化开发</a></li> <li><a href=/#!/framework>模块化框架</a></li> <li><a href=/#!/components>模块生态</a></li> <li><a href="/#!/command?title=本地开发">文件监听与自动刷新</a></li> <li><a href="/#!/command?title=scrat release">各种构建参数搭配</a></li> <li><a href=/#!/todo>部署目录结构说明</a></li> <li><a href="/#!/components?title=安装">安装Github上的组件</a></li> <li><a href="/#!/command?title=scrat%20server%20%26lt%3Bcmd%26gt%3B">调试服务器使用技巧</a></li> </ul>'}});